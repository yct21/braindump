<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>asyncronous-programming on Braindump</title><link>https://yct21.github.io/braindump/tags/asyncronous-programming/</link><description>Recent content in asyncronous-programming on Braindump</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yct21.github.io/braindump/tags/asyncronous-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>async/await</title><link>https://yct21.github.io/braindump/async-await/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yct21.github.io/braindump/async-await/</guid><description>[!todo] todo:
relationship with future trait The async/await are syntax sugars for [[asynchronous programming-rust|asynchronous programming]] in Rust.</description></item><item><title>asynchronous executor</title><link>https://yct21.github.io/braindump/asynchronous-executor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yct21.github.io/braindump/asynchronous-executor/</guid><description> [!todo] Todo:
Replace this stub note with real content</description></item><item><title>asynchronous programming (rust)</title><link>https://yct21.github.io/braindump/asynchronous-programming-rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yct21.github.io/braindump/asynchronous-programming-rust/</guid><description>[!todo] Todo:
compare with other concurrent programming model Asynchronous programming is a concurrent programming model to run multiple tasks concurrently with non-blocking interfaces.</description></item><item><title>future</title><link>https://yct21.github.io/braindump/future/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yct21.github.io/braindump/future/</guid><description>A future represents an [[asynchronous programming|asynchronous]] computation that can produce a value at some time.
In rust a future is a type or value of type that implements std::future::Future trait.</description></item><item><title>leaf future</title><link>https://yct21.github.io/braindump/leaf-future/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yct21.github.io/braindump/leaf-future/</guid><description>A leaf future is a [[future]] without any inner futures. It directly represents some resource that may not yet be ready to return a result.</description></item><item><title>pin</title><link>https://yct21.github.io/braindump/pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yct21.github.io/braindump/pin/</guid><description>[!todo] Todo:
no-alias Pin is a smart pointer. It wraps another pointer and declares that its pointee has a stable location in memory, and cannot be moved elsewhere or deallocated before Pin is dropped, unless it wraps a types that implements Unpin.</description></item></channel></rss>